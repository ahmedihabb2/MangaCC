{
  "version": 3,
  "sources": ["../../node_modules/prismjs/plugins/show-invisibles/prism-show-invisibles.js"],
  "sourcesContent": ["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\n\tvar invisibles = {\n\t\t'tab': /\\t/,\n\t\t'crlf': /\\r\\n/,\n\t\t'lf': /\\n/,\n\t\t'cr': /\\r/,\n\t\t'space': / /\n\t};\n\n\n\t/**\n\t * Handles the recursive calling of `addInvisibles` for one token.\n\t *\n\t * @param {Object|Array} tokens The grammar or array which contains the token.\n\t * @param {string|number} name The name or index of the token in `tokens`.\n\t */\n\tfunction handleToken(tokens, name) {\n\t\tvar value = tokens[name];\n\n\t\tvar type = Prism.util.type(value);\n\t\tswitch (type) {\n\t\t\tcase 'RegExp':\n\t\t\t\tvar inside = {};\n\t\t\t\ttokens[name] = {\n\t\t\t\t\tpattern: value,\n\t\t\t\t\tinside: inside\n\t\t\t\t};\n\t\t\t\taddInvisibles(inside);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Array':\n\t\t\t\tfor (var i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\thandleToken(value, i);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault: // 'Object'\n\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\tvar inside = value.inside || (value.inside = {});\n\t\t\t\taddInvisibles(inside);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Recursively adds patterns to match invisible characters to the given grammar (if not added already).\n\t *\n\t * @param {Object} grammar\n\t */\n\tfunction addInvisibles(grammar) {\n\t\tif (!grammar || grammar['tab']) {\n\t\t\treturn;\n\t\t}\n\n\t\t// assign invisibles here to \"mark\" the grammar in case of self references\n\t\tfor (var name in invisibles) {\n\t\t\tif (invisibles.hasOwnProperty(name)) {\n\t\t\t\tgrammar[name] = invisibles[name];\n\t\t\t}\n\t\t}\n\n\t\t// eslint-disable-next-line no-redeclare\n\t\tfor (var name in grammar) {\n\t\t\tif (grammar.hasOwnProperty(name) && !invisibles[name]) {\n\t\t\t\tif (name === 'rest') {\n\t\t\t\t\taddInvisibles(grammar['rest']);\n\t\t\t\t} else {\n\t\t\t\t\thandleToken(grammar, name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\taddInvisibles(env.grammar);\n\t});\n}());\n"],
  "mappings": ";CAAC,WAAY;AAEZ,MAAI,OAAO,UAAU,aAAa;AACjC;AAAA,EACD;AAGA,MAAI,aAAa;AAAA,IAChB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AASA,WAAS,YAAY,QAAQ,MAAM;AAClC,QAAI,QAAQ,OAAO,IAAI;AAEvB,QAAI,OAAO,MAAM,KAAK,KAAK,KAAK;AAChC,YAAQ,MAAM;AAAA,MACb,KAAK;AACJ,YAAI,SAAS,CAAC;AACd,eAAO,IAAI,IAAI;AAAA,UACd,SAAS;AAAA,UACT;AAAA,QACD;AACA,sBAAc,MAAM;AACpB;AAAA,MAED,KAAK;AACJ,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAK;AAC7C,sBAAY,OAAO,CAAC;AAAA,QACrB;AACA;AAAA,MAED;AAEC,YAAI,SAAS,MAAM,WAAW,MAAM,SAAS,CAAC;AAC9C,sBAAc,MAAM;AACpB;AAAA,IACF;AAAA,EACD;AAOA,WAAS,cAAc,SAAS;AAC/B,QAAI,CAAC,WAAW,QAAQ,KAAK,GAAG;AAC/B;AAAA,IACD;AAGA,aAAS,QAAQ,YAAY;AAC5B,UAAI,WAAW,eAAe,IAAI,GAAG;AACpC,gBAAQ,IAAI,IAAI,WAAW,IAAI;AAAA,MAChC;AAAA,IACD;AAGA,aAAS,QAAQ,SAAS;AACzB,UAAI,QAAQ,eAAe,IAAI,KAAK,CAAC,WAAW,IAAI,GAAG;AACtD,YAAI,SAAS,QAAQ;AACpB,wBAAc,QAAQ,MAAM,CAAC;AAAA,QAC9B,OAAO;AACN,sBAAY,SAAS,IAAI;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,QAAM,MAAM,IAAI,oBAAoB,SAAU,KAAK;AAClD,kBAAc,IAAI,OAAO;AAAA,EAC1B,CAAC;AACF,GAAE;",
  "names": []
}
