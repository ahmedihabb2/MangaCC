{
  "version": 3,
  "sources": ["../../node_modules/react-simple-code-editor/src/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\ntype Padding<T> = T | { top?: T; right?: T; bottom?: T; left?: T };\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  // Props for the component\n  value: string;\n  onValueChange: (value: string) => void;\n  highlight: (value: string) => string | React.ReactNode;\n  tabSize: number;\n  insertSpaces: boolean;\n  ignoreTabKey: boolean;\n  padding: Padding<number | string>;\n  style?: React.CSSProperties;\n\n  // Props for the textarea\n  textareaId?: string;\n  textareaClassName?: string;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  form?: string;\n  maxLength?: number;\n  minLength?: number;\n  name?: string;\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n  onClick?: React.MouseEventHandler<HTMLTextAreaElement>;\n  onFocus?: React.FocusEventHandler<HTMLTextAreaElement>;\n  onBlur?: React.FocusEventHandler<HTMLTextAreaElement>;\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement>;\n  onKeyDown?: React.KeyboardEventHandler<HTMLTextAreaElement>;\n\n  // Props for the hightlighted codeâ€™s pre element\n  preClassName?: string;\n};\n\ntype State = {\n  capture: boolean;\n};\n\ntype Record = {\n  value: string;\n  selectionStart: number;\n  selectionEnd: number;\n};\n\ntype History = {\n  stack: (Record & { timestamp: number })[];\n  offset: number;\n};\n\nconst KEYCODE_ENTER = 13;\nconst KEYCODE_TAB = 9;\nconst KEYCODE_BACKSPACE = 8;\nconst KEYCODE_Y = 89;\nconst KEYCODE_Z = 90;\nconst KEYCODE_M = 77;\nconst KEYCODE_PARENS = 57;\nconst KEYCODE_BRACKETS = 219;\nconst KEYCODE_QUOTE = 222;\nconst KEYCODE_BACK_QUOTE = 192;\nconst KEYCODE_ESCAPE = 27;\n\nconst HISTORY_LIMIT = 100;\nconst HISTORY_TIME_GAP = 3000;\n\nconst isWindows =\n  typeof window !== 'undefined' &&\n  'navigator' in window &&\n  /Win/i.test(navigator.platform);\nconst isMacLike =\n  typeof window !== 'undefined' &&\n  'navigator' in window &&\n  /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\nconst className = 'npm__react-simple-code-editor__textarea';\n\nconst cssText = /* CSS */ `\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.${className}:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .${className} {\n    color: transparent !important;\n  }\n\n  .${className}::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n`;\n\nexport default class Editor extends React.Component<Props, State> {\n  static defaultProps = {\n    tabSize: 2,\n    insertSpaces: true,\n    ignoreTabKey: false,\n    padding: 0,\n  };\n\n  state = {\n    capture: true,\n  };\n\n  componentDidMount() {\n    this._recordCurrentState();\n  }\n\n  private _recordCurrentState = () => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Save current state of the input\n    const { value, selectionStart, selectionEnd } = input;\n\n    this._recordChange({\n      value,\n      selectionStart,\n      selectionEnd,\n    });\n  };\n\n  private _getLines = (text: string, position: number) =>\n    text.substring(0, position).split('\\n');\n\n  private _recordChange = (record: Record, overwrite: boolean = false) => {\n    const { stack, offset } = this._history;\n\n    if (stack.length && offset > -1) {\n      // When something updates, drop the redo operations\n      this._history.stack = stack.slice(0, offset + 1);\n\n      // Limit the number of operations to 100\n      const count = this._history.stack.length;\n\n      if (count > HISTORY_LIMIT) {\n        const extras = count - HISTORY_LIMIT;\n\n        this._history.stack = stack.slice(extras, count);\n        this._history.offset = Math.max(this._history.offset - extras, 0);\n      }\n    }\n\n    const timestamp = Date.now();\n\n    if (overwrite) {\n      const last = this._history.stack[this._history.offset];\n\n      if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n        // A previous entry exists and was in short interval\n\n        // Match the last word in the line\n        const re = /[^a-z0-9]([a-z0-9]+)$/i;\n\n        // Get the previous line\n        const previous = this._getLines(last.value, last.selectionStart)\n          .pop()\n          ?.match(re);\n\n        // Get the current line\n        const current = this._getLines(record.value, record.selectionStart)\n          .pop()\n          ?.match(re);\n\n        if (previous?.[1] && current?.[1]?.startsWith(previous[1])) {\n          // The last word of the previous line and current line match\n          // Overwrite previous entry so that undo will remove whole word\n          this._history.stack[this._history.offset] = { ...record, timestamp };\n\n          return;\n        }\n      }\n    }\n\n    // Add the new operation to the stack\n    this._history.stack.push({ ...record, timestamp });\n    this._history.offset++;\n  };\n\n  private _updateInput = (record: Record) => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Update values and selection state\n    input.value = record.value;\n    input.selectionStart = record.selectionStart;\n    input.selectionEnd = record.selectionEnd;\n\n    this.props.onValueChange(record.value);\n  };\n\n  private _applyEdits = (record: Record) => {\n    // Save last selection state\n    const input = this._input;\n    const last = this._history.stack[this._history.offset];\n\n    if (last && input) {\n      this._history.stack[this._history.offset] = {\n        ...last,\n        selectionStart: input.selectionStart,\n        selectionEnd: input.selectionEnd,\n      };\n    }\n\n    // Save the changes\n    this._recordChange(record);\n    this._updateInput(record);\n  };\n\n  private _undoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the previous edit\n    const record = stack[offset - 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.max(offset - 1, 0);\n    }\n  };\n\n  private _redoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the next edit\n    const record = stack[offset + 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.min(offset + 1, stack.length - 1);\n    }\n  };\n\n  private _handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    const { tabSize, insertSpaces, ignoreTabKey, onKeyDown } = this.props;\n\n    if (onKeyDown) {\n      onKeyDown(e);\n\n      if (e.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (e.keyCode === KEYCODE_ESCAPE) {\n      e.currentTarget.blur();\n    }\n\n    const { value, selectionStart, selectionEnd } = e.currentTarget;\n\n    const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\n\n    if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.state.capture) {\n      // Prevent focus change\n      e.preventDefault();\n\n      if (e.shiftKey) {\n        // Unindent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const nextValue = value\n          .split('\\n')\n          .map((line, i) => {\n            if (\n              i >= startLine &&\n              i <= endLine &&\n              line.startsWith(tabCharacter)\n            ) {\n              return line.substring(tabCharacter.length);\n            }\n\n            return line;\n          })\n          .join('\\n');\n\n        if (value !== nextValue) {\n          const startLineText = linesBeforeCaret[startLine];\n\n          this._applyEdits({\n            value: nextValue,\n            // Move the start cursor if first line in selection was modified\n            // It was modified only if it started with a tab\n            selectionStart: startLineText?.startsWith(tabCharacter)\n              ? selectionStart - tabCharacter.length\n              : selectionStart,\n            // Move the end cursor by total number of characters removed\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\n          });\n        }\n      } else if (selectionStart !== selectionEnd) {\n        // Indent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const startLineText = linesBeforeCaret[startLine];\n\n        this._applyEdits({\n          value: value\n            .split('\\n')\n            .map((line, i) => {\n              if (i >= startLine && i <= endLine) {\n                return tabCharacter + line;\n              }\n\n              return line;\n            })\n            .join('\\n'),\n          // Move the start cursor by number of characters added in first line of selection\n          // Don't move it if it there was no text before cursor\n          selectionStart:\n            startLineText && /\\S/.test(startLineText)\n              ? selectionStart + tabCharacter.length\n              : selectionStart,\n          // Move the end cursor by total number of characters added\n          selectionEnd:\n            selectionEnd + tabCharacter.length * (endLine - startLine + 1),\n        });\n      } else {\n        const updatedSelection = selectionStart + tabCharacter.length;\n\n        this._applyEdits({\n          // Insert tab character at caret\n          value:\n            value.substring(0, selectionStart) +\n            tabCharacter +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_BACKSPACE) {\n      const hasSelection = selectionStart !== selectionEnd;\n      const textBeforeCaret = value.substring(0, selectionStart);\n\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n        // Prevent default delete behaviour\n        e.preventDefault();\n\n        const updatedSelection = selectionStart - tabCharacter.length;\n\n        this._applyEdits({\n          // Remove tab character at caret\n          value:\n            value.substring(0, selectionStart - tabCharacter.length) +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_ENTER) {\n      // Ignore selections\n      if (selectionStart === selectionEnd) {\n        // Get the current line\n        const line = this._getLines(value, selectionStart).pop();\n        const matches = line?.match(/^\\s+/);\n\n        if (matches?.[0]) {\n          e.preventDefault();\n\n          // Preserve indentation on inserting a new line\n          const indent = '\\n' + matches[0];\n          const updatedSelection = selectionStart + indent.length;\n\n          this._applyEdits({\n            // Insert indentation character at caret\n            value:\n              value.substring(0, selectionStart) +\n              indent +\n              value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      }\n    } else if (\n      e.keyCode === KEYCODE_PARENS ||\n      e.keyCode === KEYCODE_BRACKETS ||\n      e.keyCode === KEYCODE_QUOTE ||\n      e.keyCode === KEYCODE_BACK_QUOTE\n    ) {\n      let chars;\n\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n        chars = ['(', ')'];\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\n        if (e.shiftKey) {\n          chars = ['{', '}'];\n        } else {\n          chars = ['[', ']'];\n        }\n      } else if (e.keyCode === KEYCODE_QUOTE) {\n        if (e.shiftKey) {\n          chars = ['\"', '\"'];\n        } else {\n          chars = [\"'\", \"'\"];\n        }\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n        chars = ['`', '`'];\n      }\n\n      // If text is selected, wrap them in the characters\n      if (selectionStart !== selectionEnd && chars) {\n        e.preventDefault();\n\n        this._applyEdits({\n          value:\n            value.substring(0, selectionStart) +\n            chars[0] +\n            value.substring(selectionStart, selectionEnd) +\n            chars[1] +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart,\n          selectionEnd: selectionEnd + 2,\n        });\n      }\n    } else if (\n      (isMacLike\n        ? // Trigger undo with âŒ˜+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z\n        : // Trigger undo with Ctrl+Z on other platforms\n          e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n      !e.shiftKey &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._undoEdit();\n    } else if (\n      (isMacLike\n        ? // Trigger redo with âŒ˜+Shift+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n        : isWindows\n        ? // Trigger redo with Ctrl+Y on Windows\n          e.ctrlKey && e.keyCode === KEYCODE_Y\n        : // Trigger redo with Ctrl+Shift+Z on other platforms\n          e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._redoEdit();\n    } else if (\n      e.keyCode === KEYCODE_M &&\n      e.ctrlKey &&\n      (isMacLike ? e.shiftKey : true)\n    ) {\n      e.preventDefault();\n\n      // Toggle capturing tab key so users can focus away\n      this.setState((state) => ({\n        capture: !state.capture,\n      }));\n    }\n  };\n\n  private _handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { value, selectionStart, selectionEnd } = e.currentTarget;\n\n    this._recordChange(\n      {\n        value,\n        selectionStart,\n        selectionEnd,\n      },\n      true\n    );\n\n    this.props.onValueChange(value);\n  };\n\n  private _history: History = {\n    stack: [],\n    offset: -1,\n  };\n\n  private _input: HTMLTextAreaElement | null = null;\n\n  get session() {\n    return {\n      history: this._history,\n    };\n  }\n\n  set session(session: { history: History }) {\n    this._history = session.history;\n  }\n\n  render() {\n    const {\n      value,\n      style,\n      padding,\n      highlight,\n      textareaId,\n      textareaClassName,\n      autoFocus,\n      disabled,\n      form,\n      maxLength,\n      minLength,\n      name,\n      placeholder,\n      readOnly,\n      required,\n      onClick,\n      onFocus,\n      onBlur,\n      onKeyUp,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onKeyDown,\n      onValueChange,\n      tabSize,\n      insertSpaces,\n      ignoreTabKey,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      preClassName,\n      ...rest\n    } = this.props;\n\n    const contentStyle = {\n      paddingTop: typeof padding === 'object' ? padding.top : padding,\n      paddingRight: typeof padding === 'object' ? padding.right : padding,\n      paddingBottom: typeof padding === 'object' ? padding.bottom : padding,\n      paddingLeft: typeof padding === 'object' ? padding.left : padding,\n    };\n\n    const highlighted = highlight(value);\n\n    return (\n      <div {...rest} style={{ ...styles.container, ...style }}>\n        <pre\n          className={preClassName}\n          aria-hidden=\"true\"\n          style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\n          {...(typeof highlighted === 'string'\n            ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\n            : { children: highlighted })}\n        />\n        <textarea\n          ref={(c) => (this._input = c)}\n          style={{\n            ...styles.editor,\n            ...styles.textarea,\n            ...contentStyle,\n          }}\n          className={\n            className + (textareaClassName ? ` ${textareaClassName}` : '')\n          }\n          id={textareaId}\n          value={value}\n          onChange={this._handleChange}\n          onKeyDown={this._handleKeyDown}\n          onClick={onClick}\n          onKeyUp={onKeyUp}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          disabled={disabled}\n          form={form}\n          maxLength={maxLength}\n          minLength={minLength}\n          name={name}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          required={required}\n          autoFocus={autoFocus}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          data-gramm={false}\n        />\n        {/* eslint-disable-next-line react/no-danger */}\n        <style dangerouslySetInnerHTML={{ __html: cssText }} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    position: 'relative',\n    textAlign: 'left',\n    boxSizing: 'border-box',\n    padding: 0,\n    overflow: 'hidden',\n  },\n  textarea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    resize: 'none',\n    color: 'inherit',\n    overflow: 'hidden',\n    MozOsxFontSmoothing: 'grayscale',\n    WebkitFontSmoothing: 'antialiased',\n    WebkitTextFillColor: 'transparent',\n  },\n  highlight: {\n    position: 'relative',\n    pointerEvents: 'none',\n  },\n  editor: {\n    margin: 0,\n    border: 0,\n    background: 'none',\n    boxSizing: 'inherit',\n    display: 'inherit',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontStyle: 'inherit',\n    fontVariantLigatures: 'inherit',\n    fontWeight: 'inherit',\n    letterSpacing: 'inherit',\n    lineHeight: 'inherit',\n    tabSize: 'inherit',\n    textIndent: 'inherit',\n    textRendering: 'inherit',\n    textTransform: 'inherit',\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'keep-all',\n    overflowWrap: 'break-word',\n  },\n} as const;\n"],
  "mappings": "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",
  "names": ["Editor", "line"]
}
